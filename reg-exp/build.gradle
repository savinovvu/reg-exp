buildscript {
    ext {
        springBootVersion = '2.2.4.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {url  "https://plugins.gradle.org/m2/"}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
    }
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: "net.ltgt.apt"

mainClassName = "ru.inbox.savinov_vu.RegExpApplication"

group = 'ru.inbox.savinov_vu'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_13
targetCompatibility = JavaVersion.VERSION_13

ext {
    jwtVersion = '0.11.0'
    guavaVersion = '23.0'
    mapstructVersion = '1.3.1.Final'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url 'https://jitpack.io' }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

bootJar {
    archiveFileName = 'reg-exp.jar'
}

dependencies {
    implementation "com.google.guava:guava:${guavaVersion}"

    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    testCompileOnly 'org.projectlombok:lombok:1.18.10'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.10'

    compile "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
    compileOnly "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation("org.liquibase:liquibase-core")

    implementation("io.jsonwebtoken:jjwt-api:${jwtVersion}")
    implementation("io.jsonwebtoken:jjwt-impl:${jwtVersion}")
    runtime("io.jsonwebtoken:jjwt-jackson:${jwtVersion}")


    compileOnly('org.hibernate:hibernate-jpamodelgen')
    annotationProcessor('org.hibernate:hibernate-jpamodelgen')

    compile('com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.9.5')

    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('org.postgresql:postgresql')

    testCompile('org.springframework.boot:spring-boot-starter-test') {
        testCompile('org.springframework.security:spring-security-test')
        testRuntime('com.h2database:h2')
    }
}


    configurations {
        all {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
            exclude group: 'ch.qos.logback', module: 'logback-classic'
        }
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-vintage'
            includeEngines 'junit-jupiter'
        }

        testLogging {
            events "passed", "skipped", "failed"
        }

        testClassesDirs = sourceSets.test.output
        classpath = sourceSets.test.runtimeClasspath

        reports {
            html.enabled = true
        }

        outputs.upToDateWhen { false }
    }


    tasks.register("downloadDependencies") {
        doFirst {
            project.rootProject.allprojects.each { subProject ->
                subProject.buildscript.configurations.each { configuration ->
                    if (configuration.isCanBeResolved()) configuration.resolve()
                }
                subProject.configurations.each { configuration ->

                    if (configuration.isCanBeResolved()) configuration.resolve()
                }
            }
        }
    }


sourceSets.configureEach { sourceSet ->
    tasks.named(sourceSet.compileJavaTaskName).configure {
        options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/sources/java")
    }
}





