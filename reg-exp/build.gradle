buildscript {
    ext {
        springBootVersion = '2.1.0.M4'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        // node control
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}



plugins {
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: "com.moowork.node"

mainClassName = "ru.inbox.savinov_vu.regexp.RegExpApplication"

group = 'ru.inbox.savinov_vu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 11

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile project(':common')
    compile project(':regexp-security')
    compileOnly('org.projectlombok:lombok:1.18.2')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('io.jsonwebtoken:jjwt:0.9.1')

// todo: add spring boot actuator, swagger 2, javamelody

    compile('com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.9.5')

    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('org.postgresql:postgresql')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
}

node {
    version = "8.11.1"
    download = true
    nodeModulesDir = file("front-end")
}

task buildClientDev(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile client side folder for development'
    args = ['run', 'buildDev']
}

task buildClient(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = "Compile client side folder for production"
    args = ['run', 'build']
}

task buildClientWatch(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run', 'buildWatch']
}

bootRun.dependsOn(buildClientDev)
jar.dependsOn(buildClient)

subprojects {
    afterEvaluate {
        repositories {
            jcenter()
        }
    }
}

