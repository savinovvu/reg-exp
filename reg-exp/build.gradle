buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        // node control
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    }
}



plugins {
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: "com.moowork.node"

mainClassName = "ru.inbox.savinov_vu.regexp.RegExpApplication"

group = 'ru.inbox.savinov_vu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 10

repositories {
    mavenCentral()
}


dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('io.jsonwebtoken:jjwt:0.9.0')
    compile('javax.annotation:javax.annotation-api:1.3.1')
    /*   <groupId>javax.annotation</groupId>
    <artifactId>javax.annotation-api</artifactId>
    <version>1.3.1</version>*/
//    compile('org.springframework.security:spring-security-jwt:1.0.9.RELEASE')
//    compile('org.springframework.security:spring-security-oauth2:2.1.0.RELEASE')
    compile("org.springframework.boot:spring-boot-starter-data-rest")

    compile('com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.9.5')

    runtime('org.springframework.boot:spring-boot-devtools')
//    runtime('org.hsqldb:hsqldb')
    runtime('org.postgresql:postgresql')
//    runtime('mysql:mysql-connector-java')
//    compileOnly('org.projectlombok:lombok:1.16.20')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
}

node {
    version = "8.11.1"
    download = true
    nodeModulesDir = file("front-end")
}

task buildClientDev(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = 'Compile client side folder for development'
    args = ['run', 'buildDev']
}

task buildClient(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'build'
    description = "Compile client side folder for production"
    args = ['run', 'build']
}

task buildClientWatch(type: NpmTask, dependsOn: 'npmInstall') {
    group = 'application'
    description = "Build and watches the client side assets for rebuilding"
    args = ['run', 'buildWatch']
}

bootRun.dependsOn(buildClientDev)
jar.dependsOn(buildClient)

